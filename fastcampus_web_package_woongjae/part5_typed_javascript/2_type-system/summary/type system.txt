structural type system - 구조가 같으면 같은 타입 (typescript)
interface IPerson {
  name: string;
  age: number;
  speak(): string;
}

type PersonType = {
  name: string;
  age: number;
  speak(): string;
};


nominal type system - 구조가 같아도 이름이 다르면, 다른 타입 (java, c...)
type PersonID = string & { readonly brand: unique symbol };

function PersonID(id: string): PersonID {
  return id as PersonID;
}

getPersonById(PersonID('id-aaaaaa'));
getPersonById('id-aaaaaa'); // error


- duck typing : A라는 객체가 B가 가진 객체처럼 행동한다면 A객체를 B객체로 보겠다. (파이썬)
그러나 typescript는 duck typing이 아님.
